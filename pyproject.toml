[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "darkmagic"
version = "0.0.2"
authors = [{ name = "Omar A. Ashour", email = "ashour@berkeley.edu" }]
description = "The Dark Matter Ab initio maGnon/phonon Interaction Calculator (DarkMAGIC) is a python package for computing DM interaction rates with collective excitations based on ab initio calculations of material properties."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "phonopy",
    "pymatgen",
    "rad-tools",
    "h5py",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
Homepage = "https://github.com/Griffin-Group/DarkMAGIC"
Issues = "https://github.com/Griffin-Group/DarkMAGIC/issues"

[project.optional-dependencies]
mpi = ["mpi4py"] # Deps for MPI support
docs = [ # Optional dependencies for building documentation
    "mkdocs-material",
    "mike",
    "mkdocstrings",
    "mkdocstrings-python",
    "mkdocs-literate-nav",
    "mkdocs-gen-files",
    "mkdocs-section-index",
]
dev = [
    "ruff",
    "pytest",
    "pytest_parametrize_cases",
    "pre-commit",
] # Deps for development
build = ["build", "twine", "wheel"] # Deps for building and publishing

[tool.setuptools.packages]
find = {} # Scan the project directory with the default parameters

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
